{"version":3,"sources":["app/models/pagination.ts","app/models/activity.ts","app/api/agent.ts","app/models/profile.ts","app/stores/activityStore.ts","app/stores/profileStore.ts","app/stores/userStore.ts","app/stores/store.ts","app/stores/commonStore.ts","app/stores/modalStore.ts","app/stores/commentStore.ts","app/layout/NavBar.tsx","app/layout/LoadingComponent.tsx","features/activities/dashboard/ActivityFilters.tsx","features/profiles/FollowButton.tsx","features/profiles/ProfileCard.tsx","features/activities/dashboard/ActivityListItemAttendee.tsx","features/activities/dashboard/ActivityListItem.tsx","features/activities/dashboard/ActivityList.tsx","features/activities/dashboard/ActivityListItemPlaceholder.tsx","features/activities/dashboard/ActivityDashboard.tsx","app/common/form/ReusableTextInput.tsx","features/users/LoginForm.tsx","features/errors/ValidationErrors.tsx","features/users/RegisterForm.tsx","features/home/HopePage.tsx","app/common/form/ReusableTextArea.tsx","app/common/options/categoryOptions.ts","app/common/form/ReusableSelectInput.tsx","app/common/form/ReusableDateInput.tsx","features/activities/form/ActivityForm.tsx","features/activities/details/ActivityDetailedChat.tsx","features/activities/details/ActivityDetailedHeader.tsx","features/activities/details/ActivityDetailedInfo.tsx","features/activities/details/ActivityDetailedSidebar.tsx","features/activities/details/ActivityDetails.tsx","features/errors/NotFound.tsx","features/errors/ServerError.tsx","app/common/modals/ModalContainer.tsx","features/profiles/ProfileEditForm.tsx","features/profiles/ProfileAbout.tsx","features/profiles/ProfileActivities.tsx","features/profiles/ProfileFollowings.tsx","app/common/imageUpload/PhotoWidgetCropper.tsx","app/common/imageUpload/PhotoWidgetDropzone.tsx","app/common/imageUpload/PhotoUploadWidget.tsx","features/profiles/ProfilePhotos.tsx","features/profiles/ProfileContent.tsx","features/profiles/ProfileHeader.tsx","features/profiles/ProfilePage.tsx","features/errors/TestError.tsx","app/layout/PrivateRoute.tsx","app/layout/App.tsx","reportWebVitals.ts","app/layout/ScrollToTop.tsx","index.tsx"],"names":["PaginatedResult","data","pagination","this","PagingParams","pageNumber","pageSize","Activity","init","Object","assign","ActivityFormValues","activity","id","undefined","title","category","description","date","city","venue","axios","defaults","baseURL","process","interceptors","request","use","config","token","store","commonStore","headers","Authorization","response","a","JSON","parse","error","status","toast","method","errors","hasOwnProperty","history","push","modalStateErrors","key","flat","setServerError","Promise","reject","responseBody","requests","url","get","then","body","post","put","delete","agent","Activities","list","params","details","create","update","attend","Account","current","login","user","register","Profiles","username","getProfileActivities","predicate","uploadPhoto","file","formData","FormData","append","setMainPhoto","deletePhoto","updateProfile","profile","updateFollowing","listFollowings","Profile","image","displayName","ActivityStore","activityRegistry","Map","selectedActivity","editMode","loading","loadingInitial","pagingParams","set","setPagingParams","setPredicate","value","resetPredicate","forEach","loadActivities","axiosParams","result","setActivity","setPagination","setLoadingInitial","console","log","loadActivity","getActivity","userStore","isGoing","attendees","some","isHost","hostUsername","host","find","x","Date","state","createActivity","attendee","newActivity","runInAction","updateActivity","updatedActivity","deleteActivity","updateAttendance","filter","cancelActivityToggle","isCancelled","clearSelectedActivity","updateAttendeeFollowing","following","followersCount","makeAutoObservable","reaction","keys","clear","URLSearchParams","toString","toISOString","Array","from","values","sort","b","getTime","entries","activitiesByDate","reduce","activities","format","ProfileStore","loadingProfile","loadingActivities","uploading","userActivities","followings","loadingFollowings","activeTab","setActiveTab","loadProfile","photo","photos","isMain","setImage","p","activityStore","followingCount","loadFollowings","setDisplayName","loadUserActivities","UserStore","creds","setToken","modalStore","closeModal","logout","window","localStorage","removeItem","getUser","getItem","appLoaded","setUploaded","setItem","modal","open","openModal","content","profileStore","commentStore","comments","hubConnection","createHubConnection","activityId","HubConnectionBuilder","withUrl","accessTokenFactory","withAutomaticReconnect","configureLogging","LogLevel","Information","build","start","catch","on","comment","createdAt","unshift","stopHubConnection","stop","clearComments","addComment","invoke","StoreContext","createContext","useStore","useContext","observer","Menu","inverted","fixed","Container","Item","as","NavLink","exact","to","header","src","alt","style","marginRight","name","Button","positive","position","Image","avatar","spaced","Dropdown","pointing","text","DropdownMenu","Link","icon","onClick","LoadingComponent","Dimmer","active","Loader","vertical","size","width","marginTop","Header","attached","color","has","onChange","Reveal","animated","Content","visible","fluid","hidden","basic","e","preventDefault","handleFollow","ProfileCard","Card","Description","bio","length","substring","truncate","extra","Icon","styles","borderColor","borderWidth","List","horizontal","map","Popup","hoverable","trigger","circular","bordered","ActivityListItem","Segment","Group","Label","textAlign","marginBottom","secondary","clearing","floated","groupedActivities","group","sub","ActivityListItemPlaceholder","Placeholder","minHeight","Line","Paragraph","disabled","useState","loadingNext","setLoadingNext","useEffect","Grid","Column","pageStart","loadMore","currentPage","hasMore","totalPages","initialLoad","ReusableTextInput","props","useField","field","meta","Form","Field","touched","label","initialValues","email","password","onSubmit","setErrors","handleSubmit","isSubmitting","className","autoComplete","placeholder","type","render","ValidationErrors","Message","err","i","userName","validationSchema","Yup","required","isValid","dirty","isLoggedIn","ReusableTextArea","categoryOptions","ReusableSelectInput","helpers","Select","clearable","options","d","setValue","onBlur","setTouched","ReusableDateInput","selected","useHistory","useParams","nullable","enableReinitialize","newActivty","uuid","handleFormSubmit","rows","placeholderText","showTimeSelect","timeCaption","dateFormat","border","resetForm","onKeyPress","shiftKey","Comment","Avatar","Author","Metadata","formatDistanceToNow","Text","whiteSpace","activityImageStyle","activityImageTextStyle","bottom","left","height","padding","zIndex","top","ribbon","verticalAlign","relaxed","divided","Extra","NotFound","Inline","primary","message","Modal","onClose","setEditMode","partialProfile","isCurrentUser","Tab","Pane","ProfileEditForm","wordBreak","panes","menuItem","pane","menu","onTabChange","activeIndex","handleTabChange","itemsPerRow","userActivity","objectFit","Meta","PhotoWidgetCropper","imagePreview","setCropper","initialAspectRatio","aspectRatio","preview","guides","viewMode","autoCropArea","background","onInitialized","cropper","PhotoWidgetDropzone","setFiles","dzStyles","borderRadius","paddingTop","onDrop","useCallback","acceptedFiles","URL","createObjectURL","useDropzone","getRootProps","getInputProps","isDragActive","PhotoUploadWidget","files","revokeObjectURL","overflow","widths","margin-top","getCroppedCanvas","toBlob","blob","addPhotoMode","setAddPhotoMode","target","setTarget","currentTarget","handleSetMainPhoto","handleDeletePhoto","menuPosition","Statistic","Divider","TestErrors","baseUrl","PrivateRoute","Component","component","rest","location","useLocation","finally","hideProgressBar","path","HomePage","ActivityDashboard","ActivityDetails","ActivityForm","ProfilePage","ServerError","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ScrollToTop","pathname","scrollTo","createBrowserHistory","ReactDOM","Provider","document","getElementById"],"mappings":"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","file":"static/js/main.c5edce36.chunk.js","sourcesContent":["export interface Pagination {\r\n    currentPage: number;\r\n    itemsPerPage: number;\r\n    totalItems: number;\r\n    totalPages: number;\r\n}\r\n\r\nexport class PaginatedResult<T> {\r\n    data: T;\r\n    pagination: Pagination;\r\n   \r\n    constructor(data: T, pagination: Pagination) {\r\n        this.data = data;\r\n        this.pagination = pagination;\r\n    }\r\n}\r\n\r\nexport class PagingParams {\r\n    pageNumber;\r\n    pageSize;\r\n\r\n    constructor(pageNumber = 1, pageSize = 2) {\r\n        this.pageNumber = pageNumber;\r\n        this.pageSize = pageSize;\r\n    }\r\n}","import { Profile } from './profile';\r\n\r\nexport interface Activity {\r\n    id: string;\r\n    title: string;\r\n    date: Date | null;\r\n    description: string;\r\n    category: string;\r\n    city: string;\r\n    venue: string;\r\n    hostUsername?: string;\r\n    isCancelled: boolean;\r\n    isGoing: boolean;\r\n    isHost: boolean;\r\n    host?: Profile;\r\n    attendees: Profile[];\r\n}\r\n\r\n\r\nexport class Activity implements Activity {\r\n    constructor(init?: ActivityFormValues) {\r\n        Object.assign(this, init);\r\n    }\r\n}\r\n\r\nexport class ActivityFormValues {\r\n    id? : string = undefined;\r\n    title: string = '';\r\n    category: string = '';\r\n    description: string = '';\r\n    date: Date | null = null;\r\n    city: string = '';\r\n    venue: string = '';\r\n\r\n    constructor(activity? : ActivityFormValues) {\r\n        if (activity) {\r\n            this.id = activity.id;\r\n            this.title = activity.title;\r\n            this.category = activity.category;\r\n            this.description = activity.description;\r\n            this.date = activity.date;\r\n            this.city = activity.city;\r\n            this.venue = activity.venue;\r\n        }\r\n    }\r\n}\r\n","import { PaginatedResult } from './../models/pagination';\r\nimport { Photo, UserActivity } from './../models/profile';\r\nimport { UserFormValues } from './../models/user';\r\nimport { Activity, ActivityFormValues } from './../models/activity';\r\nimport axios, { AxiosError, AxiosResponse } from 'axios';\r\nimport { toast } from 'react-toastify';\r\nimport { history } from '../..';\r\nimport { store } from '../stores/store';\r\nimport { User } from '../models/user';\r\nimport { Profile } from '../models/profile';\r\n\r\nconst sleep = (delay: number) => {\r\n    return new Promise((resolve) => {\r\n        setTimeout(resolve, delay);\r\n    })\r\n}\r\n\r\naxios.defaults.baseURL = process.env.REACT_APP_API_URL;\r\n\r\naxios.interceptors.request.use(config => {\r\n    const token = store.commonStore.token;\r\n    if (token) config.headers.Authorization = `Bearer ${token}`;\r\n    return config;\r\n})\r\n\r\naxios.interceptors.response.use(async response => {\r\n    if (process.env.NODE_ENV === 'development') await sleep(1000);\r\n    const pagination = response.headers['pagination'];\r\n    if (pagination) {\r\n        response.data = new PaginatedResult(response.data, JSON.parse(pagination));\r\n        return response as AxiosResponse<PaginatedResult<any>>;\r\n    }\r\n    return response;\r\n}, (error: AxiosError) => {\r\n    const {data, status, config} = error.response!; \r\n    switch (status)\r\n    {\r\n        case 400:\r\n            if (typeof data === 'string'){\r\n                toast.error(data);\r\n            }\r\n            if (config.method === 'get' && data.errors.hasOwnProperty('id')){\r\n                history.push('/not-found');\r\n            }\r\n            if (data.errors){\r\n                const modalStateErrors = [];\r\n                for(const key in data.errors)\r\n                {\r\n                    if(data.errors[key]) {\r\n                       modalStateErrors.push(data.errors[key]);\r\n                    }\r\n                }\r\n                throw modalStateErrors.flat();\r\n            } \r\n            break;\r\n        case 401:\r\n            toast.error('unauthorized');\r\n            break;\r\n        case 404:\r\n            history.push('/not-found');\r\n            break;\r\n        case 500:\r\n            store.commonStore.setServerError(data);\r\n            history.push('/server-error');\r\n            break;\r\n    }\r\n    return Promise.reject(error);\r\n})\r\n\r\nconst responseBody = <T> (response: AxiosResponse<T>) => response.data;\r\n\r\nconst requests = {\r\n    get: <T> (url: string) => axios.get<T>(url).then(responseBody),\r\n    post: <T> (url: string, body: {}) => axios.post<T>(url, body).then(responseBody),\r\n    put: <T> (url: string, body: {}) => axios.put<T>(url, body).then(responseBody),\r\n    del: <T> (url: string) => axios.delete<T>(url).then(responseBody)\r\n}\r\n\r\nconst Activities = {\r\n    list: (params: URLSearchParams) => axios.get<PaginatedResult<Activity[]>>('/activities', {params})\r\n        .then(responseBody),\r\n    details: (id: string) => requests.get<Activity>(`/activities/${id}`),\r\n    create: (activity: ActivityFormValues) => requests.post<void>('/activities', activity),\r\n    update: (activity: ActivityFormValues) => requests.put<void>(`/activities/${activity.id}`, activity),\r\n    delete: (id: string) => requests.del<void>(`/activities/${id}`),\r\n    attend: (id: string) => requests.post<void>(`/activities/${id}/attend`, {})\r\n}\r\n\r\nconst Account = {\r\n    current: () => requests.get<User>('/account'),\r\n    login: (user: UserFormValues) => requests.post<User>('/account/login', user),\r\n    register: (user: UserFormValues) => requests.post<User>('/account/register', user)\r\n}\r\n\r\nconst Profiles = {\r\n    get: (username: string) => requests.get<Profile>(`/profiles/${username}`),\r\n    getProfileActivities: (username: string, predicate: string) => requests.get<UserActivity[]>(`/profiles/${username}/activities?predicate=${predicate}`),\r\n    uploadPhoto: (file: Blob) => {\r\n        let formData = new FormData();\r\n        formData.append('File', file);\r\n        return axios.post<Photo>('photos', formData, {\r\n            headers: {'Content-type': 'multipart/form-data'}\r\n        })\r\n    },\r\n    setMainPhoto: (id: string) => requests.post(`/photos/${id}/setMain`, {}),\r\n    deletePhoto: (id: string) => requests.del(`/photos/${id}`),\r\n    updateProfile: (profile: Partial<Profile>) => requests.put(`/profiles`, profile),\r\n    updateFollowing: (username: string) => requests.post(`/follow/${username}`, {}),\r\n    listFollowings: (username: string, predicate: string) => requests.get<Profile[]>(`/follow/${username}?predicate=${predicate}`)\r\n}\r\n\r\nconst agent = {\r\n    Activities,\r\n    Account,\r\n    Profiles\r\n}\r\n\r\nexport default agent;","import { User } from \"./user\";\r\n\r\nexport interface Profile {\r\n    username: string;\r\n    displayName: string;\r\n    image?: string;\r\n    bio?: string;\r\n    followersCount: number;\r\n    followingCount: number;\r\n    following: boolean;\r\n    photos?: Photo[];\r\n}\r\n\r\nexport class Profile implements Profile {\r\n    constructor (user: User) {\r\n        this.image = user.image;\r\n        this.username = user.username;\r\n        this.displayName = user.displayName\r\n    }\r\n}\r\n\r\nexport interface Photo {\r\n    id: string;\r\n    url: string;\r\n    isMain: boolean;\r\n}\r\n\r\nexport interface UserActivity {\r\n    id: string;\r\n    title: string;\r\n    category: string;\r\n    date: Date;\r\n    hostUsername: string;\r\n}","import { PagingParams } from './../models/pagination';\r\nimport { Activity, ActivityFormValues } from './../models/activity';\r\nimport { makeAutoObservable, reaction, runInAction } from \"mobx\";\r\nimport agent from '../api/agent';\r\nimport { format } from 'date-fns';\r\nimport { store } from './store';\r\nimport { Profile } from '../models/profile';\r\nimport { Pagination } from '../models/pagination';\r\n\r\nexport default class ActivityStore {\r\n    activityRegistry = new Map<string, Activity>();\r\n    selectedActivity: Activity | undefined = undefined;\r\n    editMode = false;\r\n    loading = false;\r\n    loadingInitial = false;\r\n    pagination: Pagination | null = null;\r\n    pagingParams = new PagingParams();\r\n    predicate = new Map().set('all', true);\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n        \r\n        reaction(\r\n            () => this.predicate.keys(),\r\n            () => {\r\n                this.pagingParams = new PagingParams();\r\n                this.activityRegistry.clear();\r\n                this.loadActivities();\r\n            }\r\n        )\r\n    }\r\n\r\n    setPagingParams = (pagingParams: PagingParams) => {\r\n        this.pagingParams = pagingParams;\r\n    }\r\n\r\n    setPredicate = (predicate: string, value: string | Date) => {\r\n        const resetPredicate = () => {\r\n            this.predicate.forEach((value, key) => {\r\n                if (key !== 'startDate') this.predicate.delete(key);\r\n            })\r\n        }\r\n        switch (predicate) {\r\n            case 'all':\r\n                resetPredicate();\r\n                this.predicate.set('all', true);\r\n                break;\r\n            case 'isGoing':\r\n                resetPredicate();\r\n                this.predicate.set('isGoing', true);\r\n                break;\r\n            case 'isHost':\r\n                resetPredicate();\r\n                this.predicate.set('isHost', true);\r\n                break;\r\n            case 'startDate':\r\n                this.predicate.delete('startDate');\r\n                this.predicate.set('startDate', value);\r\n                break;     \r\n        }\r\n    }\r\n\r\n    get axiosParams() {\r\n        const params = new URLSearchParams();\r\n        params.append('pageNumber', this.pagingParams.pageNumber.toString());\r\n        params.append('pageSize', this.pagingParams.pageSize.toString());\r\n        this.predicate.forEach((value, key) => {\r\n            if (key === 'startDate') {\r\n                params.append(key, (value as Date).toISOString())\r\n            } else {\r\n                params.append(key,value);\r\n            }\r\n        })\r\n        return params;\r\n    }\r\n\r\n    get activitiesByDate() {\r\n        return Array.from(this.activityRegistry.values()).sort((a, b) =>\r\n            a.date!.getTime() - b.date!.getTime());\r\n    }\r\n\r\n    get groupedActivities() {\r\n        return Object.entries(\r\n            this.activitiesByDate.reduce((activities, activity) => {\r\n                const date = format(activity.date!, 'dd MMM yyyy');\r\n                activities[date] = activities[date] ? [...activities[date], activity] : [activity];\r\n                return activities;\r\n            }, {} as {[key: string] : Activity[]})\r\n        ) \r\n    }\r\n\r\n    loadActivities = async () => {\r\n        this.loadingInitial = true;\r\n        try {\r\n            const result = await agent.Activities.list(this.axiosParams);\r\n            result.data.forEach((activity) => {\r\n                this.setActivity(activity);\r\n            });\r\n            this.setPagination(result.pagination);\r\n            this.setLoadingInitial(false);\r\n        } catch (error) {\r\n            console.log(error);\r\n            this.setLoadingInitial(false);\r\n        }\r\n    }\r\n\r\n    setPagination = (pagination: Pagination) => {\r\n        this.pagination = pagination;\r\n    }\r\n\r\n    loadActivity = async(id: string) => {\r\n        let activity = this.getActivity(id);\r\n        if(activity) {\r\n            this.selectedActivity = activity;     \r\n            return activity;       \r\n        } else {\r\n            this.loadingInitial = true;\r\n            try {\r\n                activity = await agent.Activities.details(id);\r\n                this.setActivity(activity);\r\n                this.selectedActivity = activity;\r\n                this.setLoadingInitial(false);\r\n                return activity;\r\n            } catch (error) {\r\n                console.log(error);\r\n                this.setLoadingInitial(false);\r\n            }\r\n        }\r\n    }\r\n\r\n    private setActivity = (activity: Activity) => {\r\n        const user = store.userStore.user;\r\n        if (user) {\r\n            activity.isGoing = activity.attendees!.some(\r\n                a => a.username === user.username\r\n            )\r\n            activity.isHost = activity.hostUsername === user.username;\r\n            activity.host = activity.attendees?.find(x => x.username === activity.hostUsername)\r\n        }\r\n        activity.date = new Date(activity.date!);\r\n        this.activityRegistry.set(activity.id, activity);\r\n    }\r\n\r\n    private getActivity = (id: string) => {\r\n        return this.activityRegistry.get(id);\r\n    }\r\n\r\n    setLoadingInitial = (state: boolean) => {\r\n        this.loadingInitial = state;\r\n    }\r\n\r\n    createActivity = async (activity: ActivityFormValues) => {\r\n        const user = store.userStore.user;\r\n        const attendee = new Profile(user!);\r\n        try {\r\n            await agent.Activities.create(activity);\r\n            const newActivity = new Activity(activity);\r\n            newActivity.hostUsername = user!.username;\r\n            newActivity.attendees = [attendee];\r\n            this.setActivity(newActivity);\r\n            runInAction(() => {\r\n                this.selectedActivity = newActivity;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    updateActivity = async (activity: ActivityFormValues) => {\r\n        try {\r\n            await agent.Activities.update(activity);\r\n            runInAction(() => {\r\n                if (activity.id) {\r\n                    let updatedActivity = {...this.getActivity(activity.id), ...activity}\r\n                    this.activityRegistry.set(activity.id, updatedActivity as Activity);\r\n                    this.selectedActivity = updatedActivity as Activity;\r\n                }\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    deleteActivity = async (id: string) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Activities.delete(id);\r\n            runInAction(() => {\r\n                this.activityRegistry.delete(id);\r\n                this.loading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    updateAttendance = async () => {\r\n        const user = store.userStore.user;\r\n        this.loading = true;\r\n        try {\r\n            await agent.Activities.attend(this.selectedActivity!.id);\r\n            runInAction(() => {\r\n                if (this.selectedActivity?.isGoing) {\r\n                    this.selectedActivity.attendees = \r\n                        this.selectedActivity.attendees?.filter(a => a.username !== user?.username)\r\n                    this.selectedActivity.isGoing = false;\r\n                } else {\r\n                    const attendee = new Profile(user!);\r\n                    this.selectedActivity?.attendees?.push(attendee);\r\n                    this.selectedActivity!.isGoing = true;\r\n                }\r\n                this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!);\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        } finally {\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    cancelActivityToggle = async () => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Activities.attend(this.selectedActivity!.id);\r\n            runInAction(() => {\r\n                this.selectedActivity!.isCancelled = !this.selectedActivity?.isCancelled;\r\n                this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!);\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        } finally {\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    clearSelectedActivity = () => {\r\n        this.selectedActivity = undefined;\r\n    }\r\n\r\n    updateAttendeeFollowing = (username: string) => {\r\n        this.activityRegistry.forEach(activity => {\r\n            activity.attendees.forEach(attendee => {\r\n                if (attendee.username === username) {\r\n                    attendee.following ? attendee.followersCount-- : attendee.followersCount++\r\n                    attendee.following = !attendee.following;\r\n                }\r\n            })\r\n        })\r\n    }\r\n}","import { UserActivity } from './../models/profile';\r\nimport { makeAutoObservable, reaction, runInAction } from \"mobx\";\r\nimport agent from \"../api/agent\";\r\nimport { Photo, Profile } from \"../models/profile\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class ProfileStore {\r\n    profile: Profile | null = null;\r\n    loadingProfile = false;\r\n    loadingActivities = false;\r\n    uploading = false;\r\n    loading = false;\r\n    userActivities: UserActivity[] = [];\r\n    followings: Profile[] = [];\r\n    loadingFollowings = false;\r\n    activeTab = 0;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n\r\n        reaction(\r\n            () => this.activeTab,\r\n            activeTab => {\r\n                if (activeTab === 3 || activeTab === 4) {\r\n                    const predicate = activeTab === 3 ? 'followers' : 'following';\r\n                    this.loadFollowings(predicate);\r\n                } else {\r\n                    this.followings = [];\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    setActiveTab = (activeTab: any) => {\r\n        this.activeTab = activeTab;\r\n    }\r\n\r\n    get isCurrentUser() {\r\n        if  (store.userStore.user && this.profile) {\r\n            return store.userStore.user.username === this.profile.username;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    loadProfile = async (username: string) => {\r\n        this.loadingProfile = true;\r\n        try {\r\n            const profile = await agent.Profiles.get(username);\r\n            runInAction(() => {\r\n                this.profile = profile;\r\n                this.loadingProfile = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loadingProfile = false);\r\n        }\r\n    } \r\n\r\n    uploadPhoto = async (file: Blob) => {\r\n        this.uploading = true;\r\n        try{\r\n            const response = await agent.Profiles.uploadPhoto(file);\r\n            const photo = response.data;\r\n            runInAction(() => {\r\n                if (this.profile) {\r\n                    this.profile.photos?.push(photo);\r\n                    if (photo.isMain && store.userStore.user) {\r\n                        store.userStore.setImage(photo.url);\r\n                        this.profile.image = photo.url;\r\n                    }\r\n                }\r\n                this.uploading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.uploading = false);\r\n        }\r\n    }\r\n\r\n    setMainPhoto = async(photo: Photo) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.setMainPhoto(photo.id);\r\n            store.userStore.setImage(photo.url);\r\n            runInAction(() => {\r\n                if(this.profile && this.profile.photos) {\r\n                    this.profile.photos.find(p => p.isMain)!.isMain = false;\r\n                    this.profile.photos.find(p => p.id === photo.id)!.isMain = true;\r\n                    this.profile.image = photo.url;\r\n                    this.loading = false;\r\n                }\r\n            })\r\n        } catch(error) {\r\n            console.log(error);\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    deletePhoto = async(photo: Photo) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.deletePhoto(photo.id);\r\n            runInAction(() => {\r\n                if(this.profile) {\r\n                    this.profile.photos = this.profile.photos?.filter(p => p.id !== photo.id);\r\n                    this.loading = false;\r\n                }\r\n\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    updateFollowing = async (username: string, following: boolean) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.updateFollowing(username);\r\n            store.activityStore.updateAttendeeFollowing(username);\r\n            runInAction(() => {\r\n                if(this.profile && this.profile.username !== store.userStore.user?.username && this.profile.username === username) {\r\n                    following ? this.profile.followersCount++ : this.profile.followersCount--;\r\n                    this.profile.following = !this.profile.following;\r\n                }\r\n                if(this.profile && this.profile.username === store.userStore.user?.username) {\r\n                    following ? this.profile.followingCount++ : this.profile.followingCount--;\r\n                }\r\n                this.followings.forEach(profile => {\r\n                    if (profile.username === username) {\r\n                        profile.following ? profile.followersCount-- : profile.followersCount++;\r\n                        profile.following = !profile.following;\r\n                    }\r\n                })\r\n                this.loading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    loadFollowings = async (predicate: string) => {\r\n        this.loadingFollowings = true;\r\n        try {\r\n            const followings = await agent.Profiles.listFollowings(this.profile!.username, predicate);\r\n            runInAction(() => {\r\n                this.followings = followings;\r\n                this.loadingFollowings = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loadingFollowings = false);\r\n        }\r\n    }\r\n\r\n    updateProfile = async (profile: Partial<Profile>) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.updateProfile(profile);\r\n            runInAction(() => {\r\n                if(profile.displayName && store.userStore.user?.displayName !== profile.displayName ) {\r\n                    store.userStore.setDisplayName(profile.displayName!);\r\n                }\r\n                this.profile = {...this.profile, ...profile as Profile};\r\n                this.loading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    loadUserActivities = async (username: string, predicate?: string) => {\r\n        this.loadingActivities = true;\r\n        try {\r\n            const userActivities = await agent.Profiles.getProfileActivities(username, predicate!);\r\n            runInAction(() => {\r\n                this.userActivities = userActivities;\r\n                this.loadingActivities = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loadingActivities = false)\r\n        }\r\n    }\r\n}","import { makeAutoObservable, runInAction } from \"mobx\";\r\nimport agent from \"../api/agent\";\r\nimport { User, UserFormValues } from \"../models/user\";\r\nimport { history } from \"../..\"\r\nimport { store } from \"./store\";\r\n\r\nexport default class UserStore {\r\n    user: User | null = null;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    get isLoggedIn() {\r\n        return !!this.user;\r\n    }\r\n\r\n    login = async(creds: UserFormValues) => {\r\n        try {\r\n            const user = await agent.Account.login(creds);\r\n            store.commonStore.setToken(user.token);\r\n            runInAction(() => this.user = user); \r\n            history.push('/activities');\r\n            store.modalStore.closeModal();\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    } \r\n\r\n    logout = () => {\r\n        store.commonStore.setToken(null);\r\n        window.localStorage.removeItem('jwt');\r\n        this.user = null;\r\n        history.push('/');\r\n    }\r\n\r\n    getUser = async() => {\r\n        try {\r\n            const user = await agent.Account.current();\r\n            runInAction(() => this.user = user);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    register = async(creds: UserFormValues) => {\r\n        try {\r\n            const user = await agent.Account.login(creds);\r\n            store.commonStore.setToken(user.token);\r\n            runInAction(() => this.user = user); \r\n            history.push('/activities');\r\n            store.modalStore.closeModal();\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    setImage = (image: string) => {\r\n        if(this.user) this.user.image = image;\r\n    }\r\n\r\n    setDisplayName = (displayName: string) => {\r\n        if(this.user) this.user.displayName = displayName;\r\n    }\r\n}","import { createContext, useContext } from \"react\";\r\nimport ActivityStore from \"./activityStore\";\r\nimport CommentStore from \"./commentStore\";\r\nimport CommonStore from \"./commonStore\";\r\nimport ModalStore from \"./modalStore\";\r\nimport ProfileStore from \"./profileStore\";\r\nimport UserStore from \"./userStore\";\r\n\r\ninterface Store {\r\n    activityStore: ActivityStore;\r\n    commonStore: CommonStore;\r\n    userStore: UserStore,\r\n    modalStore: ModalStore,\r\n    profileStore: ProfileStore,\r\n    commentStore: CommentStore\r\n}\r\n\r\nexport const store: Store = {\r\n    activityStore: new ActivityStore(),\r\n    commonStore: new CommonStore(),\r\n    userStore: new UserStore(),\r\n    modalStore: new ModalStore(),\r\n    profileStore: new ProfileStore(),\r\n    commentStore: new CommentStore()\r\n}\r\n\r\nexport const StoreContext = createContext(store)\r\n\r\nexport function useStore() {\r\n    return useContext(StoreContext);\r\n}","import { makeAutoObservable, reaction } from \"mobx\";\r\nimport { ServerError } from \"../models/serverError\";\r\n\r\nexport default class CommonStore {\r\n    error: ServerError | null = null;\r\n    token: string | null = window.localStorage.getItem('jwt');\r\n    appLoaded = false;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n\r\n        reaction(\r\n            () => this.token,\r\n            token => {\r\n                if(token)\r\n                {\r\n                    window.localStorage.setItem('jwt', token);\r\n                } else {\r\n                    window.localStorage.removeItem('jwt');\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    setServerError = (error : ServerError) => {\r\n        this.error = error;\r\n    }\r\n\r\n    setToken = (token: string | null = null) => {\r\n        this.token = token;\r\n    }\r\n\r\n    setUploaded = () => {\r\n        this.appLoaded = true;\r\n    }\r\n}","import { makeAutoObservable } from \"mobx\"\r\n\r\ninterface Modal {\r\n    open: boolean;\r\n    body: JSX.Element | null;\r\n}\r\n\r\nexport default class ModalStore {\r\n    modal: Modal = {\r\n        open: false,\r\n        body: null\r\n    }\r\n\r\n    constructor() {\r\n        makeAutoObservable(this)\r\n    }\r\n\r\n    openModal = (content: JSX.Element) => {\r\n        this.modal.open = true;\r\n        this.modal.body = content;\r\n    }\r\n\r\n    closeModal = () => {\r\n        this.modal.open = false;\r\n        this.modal.body = null;\r\n    }\r\n}","import { runInAction } from 'mobx';\r\nimport { makeAutoObservable } from 'mobx';\r\nimport { HubConnection, HubConnectionBuilder, LogLevel } from \"@microsoft/signalr\";\r\nimport { ChatComment } from \"../models/comment\";\r\nimport { store } from './store';\r\n\r\nexport default class CommentStore {\r\n    comments : ChatComment[] = [];\r\n    hubConnection : HubConnection | null = null;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    createHubConnection = (activityId: string) => {\r\n        if (store.activityStore.selectedActivity) {\r\n            this.hubConnection = new HubConnectionBuilder()\r\n                .withUrl(process.env.REACT_APP_CHAT_URL + '?activityId=' + activityId, {\r\n                    accessTokenFactory: () => store.userStore.user?.token!\r\n                })\r\n                .withAutomaticReconnect()\r\n                .configureLogging(LogLevel.Information)\r\n                .build();\r\n            \r\n                this.hubConnection.start().catch(error => console.log('Error establishing the connection', error));\r\n            \r\n            this.hubConnection.on('LoadComments', (comments : ChatComment[]) => {\r\n                runInAction(() => {\r\n                    comments.forEach(comment => {\r\n                        comment.createdAt = new Date(comment.createdAt + 'Z');\r\n                    })  \r\n                    this.comments = comments\r\n                });\r\n            })\r\n\r\n            this.hubConnection.on('ReceiveComment', (comment : ChatComment) => {\r\n                runInAction(() => {\r\n                    comment.createdAt = new Date(comment.createdAt);   \r\n                    this.comments.unshift(comment)});\r\n            })\r\n        }\r\n    }\r\n\r\n    stopHubConnection = () => {\r\n        this.hubConnection?.stop().catch(error => console.log('Error stToping connection', error))\r\n    }\r\n\r\n    clearComments = () => {\r\n        this.comments = [];\r\n        this.stopHubConnection();\r\n    }\r\n\r\n    addComment = async(values: any) => {\r\n        values.activityId = store.activityStore.selectedActivity?.id;\r\n        try{\r\n            await this.hubConnection?.invoke('SendComment', values);\r\n        } catch(error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n}","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Link, NavLink } from 'react-router-dom';\r\nimport { Button, Container, Menu, Image, Dropdown, DropdownMenu } from 'semantic-ui-react';\r\nimport { useStore } from '../stores/store';\r\n\r\n\r\nexport default observer (function NavBar() {\r\n    const { userStore: {user, logout} } = useStore();\r\n    \r\n    return (\r\n        <Menu inverted fixed='top'>\r\n            <Container>\r\n                <Menu.Item as={NavLink} exact to='/' header>\r\n                    <img src=\"/assets/logo.png\" alt=\"logo\" style={{marginRight: '10px'}}/>\r\n                    Reactivities\r\n                </Menu.Item>\r\n                <Menu.Item as={NavLink} to='/activities' name='Activities' />\r\n                <Menu.Item as={NavLink} to='/errors' name='Errors' />\r\n                <Menu.Item>\r\n                    <Button as={NavLink} to='/createActivity' positive content='Create Activity'/>\r\n                </Menu.Item>\r\n                <Menu.Item position='right'>\r\n                    <Image src={user?.image || '/assets/user.png'} avatar spaced='right' />\r\n                    <Dropdown pointing='top left' text={user?.displayName}>\r\n                        <DropdownMenu>\r\n                            <Dropdown.Item as={Link} to={`/profiles/${user?.username}`} \r\n                                text='My profile' icon='user' />\r\n                            <Dropdown.Item onClick={logout} text='Logout' icon='power' />\r\n                        </DropdownMenu>\r\n                    </Dropdown>\r\n                </Menu.Item>\r\n            </Container>\r\n        </Menu>\r\n    )\r\n})","import React from 'react';\r\nimport { Dimmer, Loader } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    inverted?: boolean;\r\n    content: string;\r\n}\r\n\r\nexport default function LoadingComponent({inverted = true, content = 'Loading...'} : Props) {\r\n    return(\r\n        <Dimmer active={true} inverted={inverted}>\r\n            <Loader content={content}/>\r\n        </Dimmer>\r\n    )\r\n}","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport Calendar from 'react-calendar';\r\nimport { Header, Menu } from \"semantic-ui-react\";\r\nimport { useStore } from '../../../app/stores/store';\r\n\r\nexport default observer (function ActivityFilters() {\r\n    const {activityStore: {predicate, setPredicate}} = useStore();\r\n    return (\r\n        <>\r\n            <Menu vertical size='large' style={{ width: '100%', marginTop: 25 }}>\r\n                <Header icon='filter' attached color='teal' content='Filters' />\r\n                <Menu.Item \r\n                    content='All Activities'\r\n                    active={predicate.has('all')}\r\n                    onClick={() => setPredicate('all', 'true')}\r\n                />\r\n                <Menu.Item \r\n                    content=\"I'm going\" \r\n                    active={predicate.has('isGoing')}\r\n                    onClick={() => setPredicate('isGoing', 'true')}\r\n                />\r\n                <Menu.Item \r\n                    content=\"I'm hosting\" \r\n                    active={predicate.has('isHost')}\r\n                    onClick={() => setPredicate('isHost', 'true')}\r\n                />\r\n            </Menu>\r\n            <Header/>\r\n            <Calendar \r\n                onChange={(date: Date) => setPredicate('startDate', date)}\r\n                value={predicate.get('startDate') || new Date()}\r\n            />\r\n        </>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React, { SyntheticEvent } from 'react';\r\nimport { Button, Reveal } from 'semantic-ui-react';\r\nimport { Profile } from '../../app/models/profile';\r\nimport { useStore } from '../../app/stores/store';\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function FollowButton({profile} : Props) {\r\n    const {profileStore, userStore} = useStore();\r\n    const {updateFollowing, loading} = profileStore;\r\n\r\n    if (userStore.user?.username === profile.username) return null;\r\n\r\n    function handleFollow(e: SyntheticEvent, username: string) {\r\n       e.preventDefault();\r\n       profile.following ? updateFollowing(username, false) : updateFollowing(username, true);\r\n    }\r\n\r\n    return (\r\n        <Reveal animated='move'>\r\n        <Reveal.Content visible style={{width: '100%'}}>\r\n            <Button \r\n                fluid \r\n                color='teal' \r\n                content={profile.following ? 'Following' : 'Not following'}\r\n            />\r\n        </Reveal.Content>\r\n        <Reveal.Content hidden style={{width: '100%'}}>\r\n            <Button \r\n                fluid \r\n                basic\r\n                color={profile.following ? 'red' : 'green'}\r\n                content={profile.following ? 'Unfollow' : 'Follow'}\r\n                loading={loading}\r\n                onClick={(e) => handleFollow(e, profile.username)}    \r\n            />\r\n        </Reveal.Content>\r\n    </Reveal>\r\n    )\r\n})","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Card, Icon, Image } from 'semantic-ui-react';\r\nimport { Profile } from '../../app/models/profile';\r\nimport FollowButton from './FollowButton';\r\n\r\ninterface Props {\r\n    profile: Profile\r\n}\r\n\r\nexport default function ProfileCard ({profile} : Props) {\r\n    function truncate(bio: string | undefined) {\r\n        if (bio) {\r\n            return bio !== undefined && bio!.length > 40 ? bio.substring(0,37) + \"...\" : bio;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Card as={Link} to={`/profiles/${profile.username}`}>\r\n            <Image src={profile.image || `/assets/user.png/`}/>\r\n            <Card.Content>\r\n                <Card.Header>{profile.displayName}</Card.Header>\r\n                <Card.Description>{truncate(profile.bio)}</Card.Description>\r\n            </Card.Content>\r\n            <Card.Content extra>\r\n                <Icon name='user'/>\r\n                {profile.followersCount} followers\r\n            </Card.Content>\r\n            <FollowButton profile={profile}/>\r\n        </Card>\r\n    )\r\n}","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { List, Image, Popup } from 'semantic-ui-react';\r\nimport { Profile } from '../../../app/models/profile';\r\nimport ProfileCard from '../../profiles/ProfileCard';\r\n\r\ninterface Props {\r\n    attendees: Profile[];\r\n}\r\n\r\nexport default observer(function ActivityListItemAttendee({ attendees }: Props) {\r\n    const styles = {\r\n        borderColor: 'orange',\r\n        borderWidth: 3\r\n    }\r\n \r\n    return (\r\n        <List horizontal>\r\n            {attendees.map(attendee => (\r\n                <Popup\r\n                    hoverable\r\n                    key={attendee.username}\r\n                    trigger={<List.Item key={attendee.username} as={Link} to={`/profile/${attendee.username}`}>\r\n                        <Image \r\n                            size='mini' \r\n                            circular src={attendee.image || '/assetts/src.png'} \r\n                            bordered \r\n                            style={attendee.following ? styles : null}   \r\n                        />\r\n                    </List.Item>}\r\n                >\r\n                    <Popup.Content>\r\n                        <ProfileCard profile={attendee} />\r\n                    </Popup.Content>\r\n                </Popup>\r\n            ))}\r\n        </List>\r\n    )\r\n})","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Icon, Item, Label, Segment } from 'semantic-ui-react';\r\nimport { Activity } from '../../../app/models/activity';\r\nimport { format } from 'date-fns';\r\nimport ActivityListItemAttendee from './ActivityListItemAttendee';\r\n\r\ninterface Props{\r\n    activity: Activity\r\n}\r\n\r\nexport default function ActivityListItem({activity} : Props) {\r\n    return(\r\n       <Segment.Group>\r\n           <Segment>\r\n                {activity.isCancelled && \r\n                    <Label attached='top' color='red' content='Cancelled' style={{textAlign: 'center'}}/>\r\n                }\r\n                <Item.Group>\r\n                    <Item>\r\n                        <Item.Image size='tiny' style={{marginBottom: 3}} circular src={activity.host?.image || '/assets/user.png'} />\r\n                        <Item.Content>\r\n                            <Item.Header as={Link} to={`/activities/${activity.id}`}>\r\n                                {activity.title}\r\n                            </Item.Header>\r\n                            <Item.Description> Hosted by <Link to={`/profiles/${activity.hostUsername}`}>{activity.host?.displayName}</Link>\r\n                            </Item.Description>\r\n                            {activity.isHost && (\r\n                                <Item.Description>\r\n                                    <Label basic color='orange'>\r\n                                        You are hosting this activity\r\n                                    </Label>\r\n                                </Item.Description>\r\n                            )}\r\n                            {activity.isGoing && !activity.host && (\r\n                                <Item.Description>\r\n                                    <Label basic color='green'>\r\n                                        You are going this activity\r\n                                    </Label>\r\n                                </Item.Description>\r\n                            )}\r\n                        </Item.Content>\r\n                    </Item>\r\n                </Item.Group>\r\n           </Segment>\r\n           <Segment>\r\n               <span>\r\n                   <Icon name='clock'/> {format(activity.date!, 'dd MMM yyyy h:mm aa')}\r\n                   <Icon name='marker'/> {activity.venue}\r\n               </span>\r\n           </Segment>\r\n           <Segment secondary>\r\n                <ActivityListItemAttendee attendees={activity.attendees!} />\r\n           </Segment>\r\n           <Segment clearing>\r\n               <span>{activity.description}</span>\r\n               <Button \r\n                    as={Link} \r\n                    to={`/activities/${activity.id}`}\r\n                    color='teal'\r\n                    floated='right'\r\n                    content='View'\r\n                />\r\n           </Segment>\r\n       </Segment.Group>\r\n    )\r\n}","import { observer } from 'mobx-react-lite';\r\nimport { Fragment } from 'react';\r\nimport { Header } from 'semantic-ui-react';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport ActivityListItem from './ActivityListItem';\r\n\r\nexport default observer(function ActivityList() {\r\n    const {activityStore} = useStore();\r\n    const {groupedActivities} = activityStore;\r\n\r\n    return(\r\n        <>\r\n            {groupedActivities.map(([group, activities]) => (\r\n                <Fragment key={group}>\r\n                    <Header sub color='teal'>\r\n                        {group}\r\n                    </Header>\r\n                    {activities.map(activity => (\r\n                        <ActivityListItem key={activity.id} activity={activity} />\r\n                    ))}\r\n                </Fragment>\r\n            ))}\r\n        </>\r\n      \r\n    )\r\n})","import React, { Fragment } from 'react';\r\nimport { Segment, Button, Placeholder } from 'semantic-ui-react';\r\n\r\nexport default function ActivityListItemPlaceholder() {\r\n    return (\r\n        <Fragment>\r\n            <Placeholder fluid style={{ marginTop: 25 }}>\r\n                <Segment.Group>\r\n                    <Segment style={{ minHeight: 110 }}>\r\n                        <Placeholder>\r\n                            <Placeholder.Header image>\r\n                                <Placeholder.Line />\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Header>\r\n                            <Placeholder.Paragraph>\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Paragraph>\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment>\r\n                        <Placeholder>\r\n                            <Placeholder.Line />\r\n                            <Placeholder.Line />\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment secondary style={{ minHeight: 70 }} />\r\n                    <Segment clearing>\r\n                        <Button disabled color='blue' floated='right' content='View' />\r\n                    </Segment>\r\n                </Segment.Group>\r\n            </Placeholder>\r\n        </Fragment>\r\n    );\r\n};\r\n","import { observer } from 'mobx-react-lite';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { Grid, Loader } from 'semantic-ui-react';\r\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\r\nimport { PagingParams } from '../../../app/models/pagination';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport ActivityFilters from './ActivityFilters';\r\nimport ActivityList from './ActivityList';\r\nimport InfiniteScroll from 'react-infinite-scroller';\r\nimport ActivityListItemPlaceholder from './ActivityListItemPlaceholder';\r\n\r\nexport default observer (function ActivityDashboard() {\r\n    const {activityStore} = useStore();\r\n    const {loadActivities, activityRegistry, setPagingParams, pagination} = activityStore;\r\n    const [loadingNext, setLoadingNext] = useState(false);\r\n\r\n    function handleGetNext() {\r\n        setLoadingNext(true);\r\n        setPagingParams(new PagingParams(pagination!.currentPage + 1))\r\n        loadActivities().then(() => setLoadingNext(false));\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(activityRegistry.size <= 1) loadActivities();\r\n    }, [activityRegistry.size, loadActivities])\r\n  \r\n    if (activityStore.loadingInitial && !loadingNext) return <LoadingComponent content={'Loading activities...'}/>\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width='10'>\r\n                {activityStore.loadingInitial && !loadingNext ? (\r\n                    <>\r\n                        <ActivityListItemPlaceholder />\r\n                        <ActivityListItemPlaceholder />\r\n                    </>\r\n                ) : (\r\n                    <InfiniteScroll\r\n                        pageStart={0}\r\n                        loadMore={handleGetNext}\r\n                        hasMore={!loadingNext && !!pagination && pagination.currentPage < pagination.totalPages}\r\n                        initialLoad={false}\r\n                    >\r\n                        <ActivityList/>\r\n                    </InfiniteScroll>\r\n                )}\r\n            </Grid.Column>\r\n            <Grid.Column width='6'>\r\n                <ActivityFilters />\r\n            </Grid.Column>\r\n            <Grid.Column width='10'>\r\n                <Loader active={loadingNext} />\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})","import { useField } from 'formik';\r\nimport React from 'react';\r\nimport { Form, Label } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    placeholder: string,\r\n    name: string,\r\n    type?: string,\r\n    label? : string\r\n}\r\n\r\nexport default function ReusableTextInput(props: Props) {\r\n    const [field, meta] = useField(props.name);\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <input {...field}{...props}/>\r\n            {meta.touched && meta.error \r\n                ? ( <Label basic color='red'>{meta.error}</Label>)\r\n                : null\r\n            }\r\n        </Form.Field>\r\n    )\r\n}","import { ErrorMessage, Form, Formik } from 'formik';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Button, Header, Label } from 'semantic-ui-react';\r\nimport ReusableTextInput from '../../app/common/form/ReusableTextInput';\r\nimport { useStore } from '../../app/stores/store';\r\n\r\nexport default observer (function LoginForm() {\r\n    const {userStore} = useStore();\r\n\r\n    return (\r\n        <Formik \r\n            initialValues={{email: '', password: '', error: null}}\r\n            onSubmit={(values, {setErrors}) => userStore.login(values).catch(error => \r\n                setErrors({error: 'Invalid email or password'}))}\r\n        >\r\n            {({handleSubmit, isSubmitting, errors}) => (\r\n                <Form className = 'ui form' onSubmit={handleSubmit} autoComplete='off'>\r\n                    <Header as='h2' content='Login to Reactivities' color='teal' textAlign='center' />\r\n                    <ReusableTextInput placeholder='Email' name='email'/>\r\n                    <ReusableTextInput placeholder='Password' name='password' type='password'/>\r\n                    <ErrorMessage\r\n                        name='error'\r\n                        render={() => <Label style={{marginBottom: 10}} basic color='red' content={errors.error}/>}\r\n                    />\r\n                    <Button positive content='Login' type='submit' loading={isSubmitting} fluid/>\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n})","import React from 'react';\r\nimport { Message } from \"semantic-ui-react\";\r\n\r\ninterface Props {\r\n    errors: any;\r\n}\r\n\r\nexport default function ValidationErrors({errors}: Props) {\r\n    return (\r\n        <Message error>\r\n            {errors && (\r\n                <Message.List>\r\n                    {errors.map((err: any, i: any) => (\r\n                        <Message.Item key={i}>{err}</Message.Item>\r\n                    ))}\r\n                </Message.List>\r\n            )}\r\n        </Message>\r\n    )\r\n}","import { ErrorMessage, Form, Formik } from 'formik';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Button, Header } from 'semantic-ui-react';\r\nimport ReusableTextInput from '../../app/common/form/ReusableTextInput';\r\nimport { useStore } from '../../app/stores/store';\r\nimport * as Yup from 'yup';\r\nimport ValidationErrors from '../errors/ValidationErrors';\r\n\r\nexport default observer (function RegisterForm() {\r\n    const {userStore} = useStore();\r\n\r\n    return (\r\n        <Formik \r\n            initialValues={{displayName: '', userName: '', email: '', password: '', error: null}}\r\n            onSubmit={(values, {setErrors}) => userStore.register(values).catch(error => \r\n                setErrors({error: error}))}\r\n            validationSchema={Yup.object({\r\n                displayName: Yup.string().required(),\r\n                userName: Yup.string().required(),\r\n                email: Yup.string().required().email(),\r\n                password: Yup.string().required(),\r\n            })}\r\n        >\r\n            {({handleSubmit, isSubmitting, errors, isValid, dirty}) => (\r\n                <Form className = 'ui form' onSubmit={handleSubmit} autoComplete='off'>\r\n                    <Header as='h2' content='Sign up to Reactivities' color='teal' textAlign='center' />\r\n                    <ReusableTextInput placeholder='Display Name' name='displayName'/>\r\n                    <ReusableTextInput placeholder='User Name' name='userName'/>\r\n                    <ReusableTextInput placeholder='Email' name='email'/>\r\n                    <ReusableTextInput placeholder='Password' name='password' type='password'/>\r\n                    <ErrorMessage\r\n                        name='error'\r\n                        render={() => <ValidationErrors errors={errors.error}/>}\r\n                    />\r\n                    <Button disabled={!isValid || !dirty || isSubmitting}\r\n                        loading={isSubmitting} positive content='Register' type='submit' fluid/>\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Container, Header, Segment, Image } from \"semantic-ui-react\";\r\nimport { useStore } from '../../app/stores/store';\r\nimport LoginForm from '../users/LoginForm';\r\nimport RegisterForm from '../users/RegisterForm';\r\n\r\nexport default observer(function HomePage() {\r\n    const { userStore, modalStore } = useStore();\r\n    return (\r\n        <Segment inverted textAlign='center' vertical className='masthead'>\r\n            <Container text>\r\n                <Header as='h1' inverted>\r\n                    <Image size='massive' src='/assets/logo.png' alt='logo' style={{ marginBottom: 12 }} />\r\n                    Reactivities\r\n                </Header>\r\n                {userStore.isLoggedIn ? (\r\n                    <>\r\n                        <Header as='h2' inverted content='Welcome to Reactivities' />\r\n                        <Button as={Link} to='/activities' size='huge' inverted>\r\n                            Go to Activities!\r\n                        </Button>\r\n                    </>\r\n                ) : (\r\n                    <>\r\n                        <Button onClick={() => modalStore.openModal(<LoginForm />)} size='huge' inverted>\r\n                            Login!\r\n                        </Button>\r\n                        <Button onClick={() => modalStore.openModal(<RegisterForm />)} size='huge' inverted>\r\n                            Register!\r\n                        </Button>\r\n                    </>\r\n                )}\r\n            </Container>\r\n        </Segment>\r\n    )\r\n})","import { useField } from 'formik';\r\nimport React from 'react';\r\nimport { Form, Label } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    placeholder: string,\r\n    name: string,\r\n    rows: number,\r\n    label? : string\r\n}\r\n\r\nexport default function ReusableTextArea(props: Props) {\r\n    const [field, meta] = useField(props.name);\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <textarea {...field}{...props}/>\r\n            {meta.touched && meta.error \r\n                ? ( <Label basic color='red'>{meta.error}</Label>)\r\n                : null\r\n            }\r\n        </Form.Field>\r\n    )\r\n}","export const categoryOptions = [\r\n    {text: 'Drinks', value: 'drinks'},\r\n    {text: 'Culture', value: 'culture'},\r\n    {text: 'Film', value: 'film'},\r\n    {text: 'Food', value: 'food'},\r\n    {text: 'Music', value: 'music'},\r\n    {text: 'Travel', value: 'travel'},\r\n]","import { useField } from 'formik';\r\nimport React from 'react';\r\nimport { Form, Label, Select } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    placeholder: string,\r\n    name: string,\r\n    options: any,\r\n    label? : string\r\n}\r\n\r\nexport default function ReusableSelectInput(props: Props) {\r\n    const [field, meta, helpers] = useField(props.name);\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <Select\r\n                clearable\r\n                options={props.options}\r\n                value={field.value || null}\r\n                onChange={(e, d) => helpers.setValue(d.value)}\r\n                onBlur={() => helpers.setTouched(true)}\r\n                placeholder={props.placeholder}\r\n            />\r\n            <textarea {...field}{...props}/>\r\n            {meta.touched && meta.error \r\n                ? ( <Label basic color='red'>{meta.error}</Label>)\r\n                : null\r\n            }\r\n        </Form.Field>\r\n    )\r\n}","import { useField } from 'formik';\r\nimport React from 'react';\r\nimport { Form, Label } from 'semantic-ui-react';\r\nimport DatePicker, {ReactDatePickerProps} from 'react-datepicker';\r\n\r\nexport default function ReusableDateInput(props: Partial<ReactDatePickerProps>) {\r\n    const [field, meta, helpers] = useField(props.name!);\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <DatePicker\r\n                {...field}\r\n                {...props}\r\n                selected={(field.value && new Date(field.value)) || null}\r\n                onChange={value => helpers.setValue(value)} \r\n            />\r\n            {meta.touched && meta.error \r\n                ? ( <Label basic color='red'>{meta.error}</Label>)\r\n                : null\r\n            }\r\n        </Form.Field>\r\n    )\r\n}","import { observer } from 'mobx-react-lite';\r\nimport { useEffect, useState } from 'react';\r\nimport { useParams } from 'react-router';\r\nimport { Button, Header, Segment } from 'semantic-ui-react';\r\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport { Formik,  Form } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport ReusableTextInput from '../../../app/common/form/ReusableTextInput';\r\nimport ReusableTextArea from '../../../app/common/form/ReusableTextArea';\r\nimport { categoryOptions } from '../../../app/common/options/categoryOptions';\r\nimport ReusableSelectInput from '../../../app/common/form/ReusableSelectInput';\r\nimport ReusableDateInput from '../../../app/common/form/ReusableDateInput';\r\nimport { ActivityFormValues } from '../../../app/models/activity';\r\nimport { v4 as uuid } from 'uuid';\r\n\r\nexport default observer (function ActivityForm() {\r\n    const history = useHistory();\r\n    const {activityStore} = useStore();\r\n    const {loadingInitial, loadActivity, createActivity, updateActivity } = activityStore;\r\n    const {id} = useParams<{id: string}>();\r\n\r\n    const [activity, setActivity] = useState<ActivityFormValues>(new ActivityFormValues());\r\n    \r\n    const validationSchema = Yup.object({\r\n        title: Yup.string().required('The activity title is required'),\r\n        description: Yup.string().required('The description title is required'),\r\n        category: Yup.string().required(),\r\n        date: Yup.string().required('Date is required').nullable(),\r\n        city: Yup.string().required(),\r\n        venue: Yup.string().required()\r\n    });\r\n\r\n    useEffect(() =>{\r\n        if(id) loadActivity(id).then(activity => setActivity(new ActivityFormValues(activity)));\r\n    }, [id, loadActivity])\r\n\r\n    function handleFormSubmit(activity: ActivityFormValues) {\r\n        if (!activity.id) {\r\n            let newActivty = {\r\n                ...activity,\r\n                id: uuid()\r\n            };\r\n            createActivity(newActivty).then(() => history.push(`/activities/${newActivty.id}`));\r\n        } else {\r\n            updateActivity(activity).then(() => history.push(`/activities/${activity.id}`))\r\n        }\r\n    }\r\n\r\n    if (loadingInitial) return <LoadingComponent content='Loading activity...' />;\r\n\r\n    return(\r\n        <Segment clearing>\r\n            <Header content='Activity Details' sub color='teal'/>\r\n            <Formik \r\n                enableReinitialize \r\n                initialValues={activity}\r\n                validationSchema={validationSchema}\r\n                onSubmit={values => handleFormSubmit(values)}>\r\n                {({handleSubmit, isValid, isSubmitting, dirty}) => (\r\n                    <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\r\n                        <ReusableTextInput name='title' placeholder='Title'/>\r\n                        <ReusableTextArea rows={3} placeholder='Description' name='description' />\r\n                        <ReusableSelectInput options={categoryOptions} placeholder='Category' name='category' />\r\n                        <ReusableDateInput\r\n                            placeholderText='Date'\r\n                            name='date'\r\n                            showTimeSelect\r\n                            timeCaption='time'\r\n                            dateFormat='MMMM d, yyyy h:mm aa'\r\n                        />\r\n                        <Header content='Location Details' sub color='teal'/>\r\n                        <ReusableTextInput placeholder='City' name='city' />\r\n                        <ReusableTextInput placeholder='Venue' name='venue' />\r\n                        <Button \r\n                            disabled={isSubmitting || !dirty || !isValid}\r\n                            loading={isSubmitting} floated='right' \r\n                            positive type='submit' content='Submit' />\r\n                        <Button as={Link} to='/activities' floated='right' type='button' content='Cancel' />\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        </Segment>\r\n    )\r\n})","import { Formik, Form, Field, FieldProps } from 'formik';\r\nimport { observer } from 'mobx-react-lite'\r\nimport React, { useEffect } from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport {Segment, Header, Comment, Loader} from 'semantic-ui-react'\r\nimport { useStore } from '../../../app/stores/store';\r\nimport * as Yup from 'yup';\r\nimport { formatDistanceToNow } from 'date-fns';\r\n\r\ninterface Props {\r\n    activityId: string;\r\n}\r\n\r\nexport default observer(function ActivityDetailedChat({activityId}: Props) {\r\n    const {commentStore} = useStore();\r\n\r\n    useEffect(() => {\r\n        if (activityId) {\r\n            commentStore.createHubConnection(activityId);\r\n        }\r\n        return () => {\r\n            commentStore.clearComments()\r\n        }\r\n    }, [commentStore, activityId])\r\n\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                attached='top'\r\n                inverted\r\n                color='teal'\r\n                style={{border: 'none'}}\r\n            >\r\n                <Header>Chat about this event</Header>\r\n            </Segment>\r\n            <Segment attached clearing>\r\n            <Formik\r\n                    onSubmit={(values, {resetForm}) => \r\n                        commentStore.addComment(values).then(() => resetForm())}\r\n                    initialValues = {{body: ''}}\r\n                    validationSchema={Yup.object({\r\n                        body: Yup.string().required()\r\n                    })}\r\n                    >\r\n                        {({isSubmitting, isValid, handleSubmit}) => (\r\n                            <Form className='ui form'>\r\n                                <Field name='body'>\r\n                                    {(props: FieldProps) => (\r\n                                        <div style={{position: 'relative'}}>\r\n                                            <Loader active={isSubmitting}/>\r\n                                            <textarea\r\n                                                placeholder='Enter your comment (Enter to submit, SHIFT + enter for new line)'\r\n                                                rows={2}\r\n                                                {...props.field}\r\n                                                onKeyPress={e => {\r\n                                                    if(e.key === 'Enter' && e.shiftKey) {\r\n                                                        return;\r\n                                                    }\r\n                                                    if(e.key === 'Enter' && !e.shiftKey) {\r\n                                                        e.preventDefault();\r\n                                                        isValid && handleSubmit();\r\n                                                    }\r\n                                                }}\r\n                                            />\r\n                                        </div>\r\n                                    )}\r\n                                </Field> \r\n                            </Form>\r\n                        )}\r\n                    </Formik>\r\n                <Comment.Group>\r\n                    {commentStore.comments.map(comment => (\r\n                          <Comment key={comment.id}>\r\n                          <Comment.Avatar src={comment.image || '/assets/user.png'}/>\r\n                          <Comment.Content>\r\n                              <Comment.Author as={Link} to={`/profiles/${comment.username}`}>{comment.displayName}</Comment.Author>\r\n                              <Comment.Metadata>\r\n                                  <div>{formatDistanceToNow(comment.createdAt)} ago</div>\r\n                              </Comment.Metadata>\r\n                              <Comment.Text style={{whiteSpace: 'pre-wrap'}}>{comment.body}</Comment.Text>\r\n                          </Comment.Content>\r\n                      </Comment>\r\n                    ))}\r\n                  \r\n                  \r\n                </Comment.Group>\r\n            </Segment>\r\n        </>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport {Button, Header, Item, Segment, Image, Label} from 'semantic-ui-react'\r\nimport {Activity} from \"../../../app/models/activity\";\r\nimport { format } from 'date-fns';\r\nimport { useStore } from '../../../app/stores/store';\r\n\r\nconst activityImageStyle = {\r\n    filter: 'brightness(30%)'\r\n};\r\n\r\nconst activityImageTextStyle = {\r\n    position: 'absolute',\r\n    bottom: '5%',\r\n    left: '5%',\r\n    width: '100%',\r\n    height: 'auto',\r\n    color: 'white'\r\n};\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default observer (function ActivityDetailedHeader({activity}: Props) {\r\n    const {activityStore: {updateAttendance, loading, cancelActivityToggle}} = useStore();\r\n    return (\r\n        <Segment.Group>\r\n            <Segment basic attached='top' style={{padding: '0'}}>\r\n                {activity.isCancelled && \r\n                    <Label style={{position: 'absolute', zIndex: 1000, left: -14, top: 20}} \r\n                        ribbon color='red' content='Cancelled'></Label>\r\n                }\r\n                <Image src={`/assets/categoryImages/${activity.category}.jpg`} fluid style={activityImageStyle}/>\r\n                <Segment style={activityImageTextStyle} basic>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Content>\r\n                                <Header\r\n                                    size='huge'\r\n                                    content={activity.title}\r\n                                    style={{color: 'white'}}\r\n                                />\r\n                                <p>{format(activity.date!, 'dd MMM yyyy')}</p>\r\n                                <p>\r\n                                    Hosted by <strong><Link to={`/profiles/${activity.host?.username}`}>{activity.host?.displayName}</Link></strong>\r\n                                </p>\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Segment>\r\n            </Segment>\r\n            <Segment clearing attached='bottom'>\r\n                {activity.isHost ? (\r\n                    <>\r\n                        <Button  \r\n                            color={activity.isCancelled ? 'red' : 'green'} \r\n                            floated='right'\r\n                            basic\r\n                            content={activity.isCancelled ? 'Re-activate Activity' : 'Cancel Activity'}\r\n                            onClick={cancelActivityToggle}\r\n                            loading={loading}/>\r\n                        <Button \r\n                            as={Link} \r\n                            disabled={activity.isCancelled}\r\n                            to={`/manage/${activity.id}`} \r\n                            color='orange' \r\n                            floated='right'>\r\n                            Manage Event\r\n                        </Button>\r\n                    </>\r\n          \r\n                ) : activity.isGoing ? (\r\n                    <Button loading={loading} onClick={updateAttendance}>Cancel attendance</Button>\r\n                ) : (\r\n                    <Button disabled={activity.isCancelled}\r\n                        loading={loading} onClick={updateAttendance} color='teal'>\r\n                            Join Activity\r\n                    </Button>\r\n                )}\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport {Segment, Grid, Icon} from 'semantic-ui-react'\r\nimport {Activity} from \"../../../app/models/activity\";\r\nimport { format } from 'date-fns';\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default observer(function ActivityDetailedInfo({activity}: Props) {\r\n    return (\r\n        <Segment.Group>\r\n            <Segment attached='top'>\r\n                <Grid>\r\n                    <Grid.Column width={1}>\r\n                        <Icon size='large' color='teal' name='info'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n                        <p>{activity.description}</p>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='calendar' size='large' color='teal'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n                        <span>\r\n                        {format(activity.date!, 'dd MMM yyyy h:mm aa')}\r\n                        </span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='marker' size='large' color='teal'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={11}>\r\n                        <span>{activity.venue}, {activity.city}</span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})","import React from 'react'\r\nimport { Segment, List, Label, Item, Image } from 'semantic-ui-react'\r\nimport { Link } from 'react-router-dom'\r\nimport { observer } from 'mobx-react-lite'\r\nimport { Activity } from '../../../app/models/activity'\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default observer(function ActivityDetailedSidebar ({activity : {attendees, host }} : Props) {\r\n    if (!attendees) return null;\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                style={{ border: 'none' }}\r\n                attached='top'\r\n                secondary\r\n                inverted\r\n                color='teal'\r\n            >\r\n                {attendees.length} {attendees.length === 1 ? 'Person' : 'People'} going\r\n            </Segment>\r\n            <Segment attached>\r\n                <List relaxed divided>\r\n                    {attendees.map(attendee => (\r\n                        <Item style={{ position: 'relative' }} key={attendee.username}>\r\n                            {attendee.username === host?.username &&\r\n                                <Label\r\n                                    style={{ position: 'absolute' }}\r\n                                    color='orange'\r\n                                    ribbon='right'\r\n                                >\r\n                                    Host\r\n                                </Label>}\r\n                            <Image size='tiny' src={attendee.image || '/assets/user.png'} />\r\n                            <Item.Content verticalAlign='middle'>\r\n                                <Item.Header as='h3'>\r\n                                    <Link to={`/profiles/${attendee.username}`}>{attendee.displayName}</Link>\r\n                                </Item.Header>\r\n                                {attendee.following &&\r\n                                <Item.Extra style={{ color: 'orange' }}>Following</Item.Extra>}\r\n                            </Item.Content>\r\n                        </Item>\r\n                    ))}\r\n                </List>\r\n            </Segment>\r\n        </>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport { useEffect } from 'react';\r\nimport { useParams } from 'react-router';\r\nimport { Grid } from 'semantic-ui-react';\r\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport ActivityDetailedChat from './ActivityDetailedChat';\r\nimport ActivityDetailedHeader from './ActivityDetailedHeader';\r\nimport ActivityDetailedInfo from './ActivityDetailedInfo';\r\nimport ActivityDetailedSidebar from './ActivityDetailedSidebar';\r\n\r\nexport default observer (function ActivityDetails() {\r\n    \r\n    const {id} = useParams<{id: string}>();\r\n    const {activityStore} = useStore();\r\n    const {selectedActivity: activity, loadActivity, loadingInitial, clearSelectedActivity} = activityStore; \r\n\r\n    useEffect(() => {\r\n        if (id) loadActivity(id);\r\n        return () => clearSelectedActivity();\r\n    }, [id, loadActivity, clearSelectedActivity]);\r\n\r\n    if(loadingInitial || !activity) return <LoadingComponent content={''} />;\r\n\r\n    return ( \r\n        <Grid>\r\n            <Grid.Column width={10}>\r\n                <ActivityDetailedHeader activity={activity} />\r\n                <ActivityDetailedInfo activity={activity} />\r\n                <ActivityDetailedChat activityId={activity.id}/>\r\n            </Grid.Column>\r\n            <Grid.Column width={6}>\r\n                <ActivityDetailedSidebar activity={activity}/>\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})","import React from 'react';\r\nimport {Button, Header, Icon, Segment} from \"semantic-ui-react\";\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport default function NotFound() {\r\n    return (\r\n        <Segment placeholder>\r\n            <Header icon>\r\n                <Icon name='search'/>\r\n                Oops - we've looked everywhere and could not find this.\r\n            </Header>\r\n            <Segment.Inline>\r\n                <Button as={Link} to='/activities' primary>\r\n                    Return to activities page\r\n                </Button>\r\n            </Segment.Inline>\r\n        </Segment>\r\n    )\r\n}","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Container, Header, Segment } from 'semantic-ui-react';\r\nimport { useStore } from '../../app/stores/store';\r\n\r\nexport default observer(function ServerError() {\r\n    const {commonStore} = useStore();\r\n    return(\r\n        <Container>\r\n            <Header as='h1' content='Server Error'/>\r\n            <Header sub as='h5' color='red' content={commonStore.error?.message} />\r\n            {commonStore.error?.details && \r\n                <Segment>\r\n                    <Header as='h4' content='Slack trace' color='teal' />\r\n                    <code style={{marginTop: '10px'}}>{commonStore.error.details}</code>\r\n                </Segment>\r\n            }\r\n        </Container>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Modal } from 'semantic-ui-react';\r\nimport { useStore } from '../../stores/store';\r\n\r\nexport default observer(function ModalContainer() {\r\n    const {modalStore} = useStore();\r\n\r\n    return (\r\n        <Modal open={modalStore.modal.open} onClose={modalStore.closeModal} size='mini'>\r\n            <Modal.Content>\r\n                {modalStore.modal.body}\r\n            </Modal.Content>\r\n        </Modal>\r\n    )\r\n})","import { Form, Formik } from 'formik';\r\nimport React from 'react';\r\nimport { Button } from 'semantic-ui-react';\r\nimport ReusableTextArea from '../../app/common/form/ReusableTextArea';\r\nimport ReusableTextInput from '../../app/common/form/ReusableTextInput';\r\nimport { useStore } from '../../app/stores/store';\r\nimport * as Yup from 'yup';\r\nimport { Profile } from '../../app/models/profile';\r\nimport { observer } from 'mobx-react-lite';\r\n\r\ninterface Props {\r\n    setEditMode: React.Dispatch<React.SetStateAction<boolean>>\r\n}\r\n\r\nexport default observer (function ProfileEdit({setEditMode} : Props) {\r\n    const {profileStore: {profile, updateProfile}} = useStore();\r\n    \r\n    const validationSchema = Yup.object({\r\n        displayName: Yup.string().required('Display name is required'),\r\n    });\r\n\r\n    async function handleFormSubmit(profile: Profile) {\r\n        const partialProfile : Partial<Profile> = {\r\n            displayName: profile.displayName,\r\n            bio: profile.bio\r\n        }\r\n        await updateProfile(partialProfile);\r\n        setEditMode(false);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Formik \r\n                enableReinitialize \r\n                initialValues={profile!}\r\n                validationSchema={validationSchema}\r\n                onSubmit={values => handleFormSubmit(values)}>\r\n                {({handleSubmit, isValid, isSubmitting, dirty}) => (\r\n                    <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\r\n                        <ReusableTextInput name='displayName' placeholder='Add your display name'/>\r\n                        <ReusableTextArea rows={12} placeholder='Add your bio' name='bio' />\r\n                        <Button \r\n                            disabled={isSubmitting || !dirty || !isValid}\r\n                            loading={isSubmitting} floated='right'\r\n                            positive type='submit' content='Update profile' />\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        </>\r\n    )\r\n})","import React, { useState } from 'react';\r\nimport { Button, Grid, Header, Tab } from 'semantic-ui-react';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { useStore } from '../../app/stores/store';\r\nimport ProfileEditForm from './ProfileEditForm';\r\n\r\nexport default observer (function ProfileAbout () {\r\n\r\n    const [editMode, setEditMode] = useState(false);\r\n    const {profileStore} = useStore();    \r\n    const {isCurrentUser, profile} = profileStore;\r\n\r\n    function truncate(bio: string | undefined) {\r\n        if (bio) {\r\n            return bio !== undefined && bio!.length > 400 ? bio.substring(0,397) + \"...\" : bio;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Tab.Pane>\r\n            <Grid>\r\n                <Grid.Column width='16'>\r\n                    <Header icon='user' as='h3' content={'About '+ profile?.displayName} floated='left' />\r\n                        <Button \r\n                            disabled={!isCurrentUser}\r\n                            floated='right'\r\n                            basic\r\n                            onClick={() => setEditMode(!editMode)}\r\n                            content={ !editMode ? 'Edit Profile' : 'Cancel'} />\r\n                </Grid.Column>\r\n                <Grid.Column width='16'>\r\n                    { !editMode \r\n                        ? <span style={{wordBreak:'break-word', whiteSpace:'pre-wrap'}}>{truncate(profile?.bio)}</span>\r\n                        : <ProfileEditForm setEditMode={setEditMode} />\r\n                    }\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n})","import { format } from 'date-fns';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React, { SyntheticEvent, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Card, Tab, Image, Grid, Header, TabProps } from 'semantic-ui-react';\r\nimport { UserActivity } from '../../app/models/profile';\r\nimport { useStore } from '../../app/stores/store';\r\n\r\nconst panes = [\r\n    { menuItem: 'Future activities', pane: {key: 'future'}},\r\n    { menuItem: 'Past activities', pane: {key: 'past'}},\r\n    { menuItem: 'Activities the user is hosting', pane: {key: 'hosting'}},\r\n]\r\n\r\nexport default observer (function ProfileActivities() {\r\n    const {profileStore} = useStore();\r\n    const {loadUserActivities, profile, userActivities, loadingActivities} = profileStore;\r\n    \r\n    useEffect(() => \r\n    {\r\n        loadUserActivities(profile!.username, 'future');\r\n    }, [loadUserActivities, profile]);\r\n\r\n    const handleTabChange = (e: SyntheticEvent, data: TabProps) => {\r\n        loadUserActivities(profile!.username, panes[data.activeIndex as number].pane.key);\r\n    }\r\n\r\n    return (\r\n        <Tab.Pane loading={loadingActivities}>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header icon='calendar' content='Activities' floated='left'/>\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    <Tab\r\n                        menu={{secondary: true, pointing: true}}\r\n                        panes={panes}\r\n                        onTabChange={(e, data) => handleTabChange(e, data)}\r\n                    />\r\n                    <br />\r\n                    <Card.Group itemsPerRow={4}> {userActivities.map((userActivity: UserActivity) => (\r\n                            <Card \r\n                                key={userActivity.id} \r\n                                as={Link} \r\n                                to={`/activities/${userActivity.id}`}>\r\n                            <Image \r\n                                src={`/assets/categoryImages/${userActivity.category}.jpg`} \r\n                                style={{minHeight: 100, objectFit: 'cover'}}/>\r\n                            <Card.Content>\r\n                                <Card.Header>{userActivity.title}</Card.Header>\r\n                                <Card.Meta>\r\n                                    <div> {format(new Date(userActivity.date), 'do LLL')} </div>\r\n                                    <div> {format(new Date(userActivity.date), 'h:mm aa')} </div>\r\n                                </Card.Meta>\r\n                            </Card.Content>\r\n                            </Card>\r\n                        ))}\r\n                        </Card.Group>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n})","import React from 'react';\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { useStore } from '../../app/stores/store';\r\nimport { Card, Grid, Header, Tab } from 'semantic-ui-react';\r\nimport ProfileCard from './ProfileCard';\r\n\r\nexport default observer (function ProfileFollowings() {\r\n    const {profileStore} = useStore();\r\n    const {profile, followings, loadingFollowings, activeTab} = profileStore;\r\n\r\n    return (\r\n        <Tab.Pane loading={loadingFollowings}>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header floated='left' icon='user' \r\n                        content={activeTab === 3 ? `People following ${profile?.displayName}` : `People ${profile?.displayName} is following`}/>\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    <Card.Group itemsPerRow={4}>\r\n                        {followings.map(profile => (\r\n                            <ProfileCard key={profile.username} profile={profile}/>\r\n                        ))}\r\n                    </Card.Group>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n})","import React from 'react';\r\nimport { Cropper } from 'react-cropper';\r\nimport 'cropperjs/dist/cropper.css';\r\n\r\ninterface Props {\r\n    imagePreview: string;\r\n    setCropper: (cropper: Cropper) => void;\r\n}\r\n\r\nexport default function PhotoWidgetCropper({imagePreview, setCropper} : Props) {\r\n    return (\r\n        <Cropper\r\n            src={imagePreview}\r\n            style={{height: 200, width: '100%'}}\r\n            initialAspectRatio={1}\r\n            aspectRatio={1}\r\n            preview='.img-preview'\r\n            guides={false}\r\n            viewMode={1}\r\n            autoCropArea={1}\r\n            background={false}\r\n            onInitialized={cropper => setCropper(cropper)}\r\n        />\r\n    )\r\n}","import React, {useCallback} from 'react'\r\nimport {useDropzone} from 'react-dropzone'\r\nimport { Header, Icon } from 'semantic-ui-react'\r\n\r\ninterface Props {\r\n    setFiles: (files: any) => void;\r\n}\r\n\r\nexport default function PhotoWidgetDropzone({setFiles} : Props) {\r\n    const dzStyles = {\r\n        border: 'dashed 3px #eee',\r\n        borderColor: '#eee',\r\n        borderRadius: '5px',\r\n        paddingTop: '30px',\r\n        textAlign: 'center' as 'center',\r\n        height: 200\r\n    }\r\n\r\n    const dzActive = {\r\n        borderColor: 'green'\r\n    }\r\n\r\n    const onDrop = useCallback(acceptedFiles => {\r\n        setFiles(acceptedFiles.map((file:any) => Object.assign(file, {\r\n            preview: URL.createObjectURL(file)\r\n        })))\r\n        console.log(acceptedFiles);\r\n    }, [setFiles])\r\n\r\n    const {getRootProps, getInputProps, isDragActive} = useDropzone({onDrop})\r\n\r\n    return (\r\n        <div {...getRootProps()} style={isDragActive ? {...dzStyles, ...dzActive} : dzStyles}>\r\n            <input {...getInputProps()} />\r\n            <Icon name='upload' size='huge'/>\r\n            <Header content='Drop image here'/>\r\n        </div>\r\n    )\r\n}","import React, { useEffect, useState } from 'react';\r\nimport { Button, Grid, Header } from 'semantic-ui-react';\r\nimport PhotoWidgetCropper from './PhotoWidgetCropper';\r\nimport PhotoWidgetDropzone from './PhotoWidgetDropzone';\r\n\r\ninterface Props {\r\n    loading: boolean;\r\n    uploadPhoto: (file: Blob) => void;\r\n}\r\n\r\nexport default function PhotoUploadWidget({loading, uploadPhoto} : Props) {\r\n    const[files, setFiles] = useState<any>([]);\r\n    const[cropper, setCropper] = useState<Cropper>();\r\n\r\n    function onCrop() {\r\n        if (cropper) {\r\n           cropper.getCroppedCanvas().toBlob(blob => uploadPhoto(blob!)); \r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            files.forEach((file: any) => URL.revokeObjectURL(file.preview))\r\n        }\r\n    }, [files])\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={4}>\r\n                <Header sub color='teal' content='Step 1 - Add Photo'/>\r\n                <PhotoWidgetDropzone setFiles={setFiles}/>\r\n            </Grid.Column>\r\n            <Grid.Column width={1}/>\r\n            <Grid.Column width={4}>\r\n                <Header sub color='teal' content='Step 2 - Resize image'/>\r\n                {files && files.length > 0 && (\r\n                    <PhotoWidgetCropper setCropper={setCropper} imagePreview={files[0].preview} />\r\n                )}\r\n            </Grid.Column>\r\n            <Grid.Column width={1}/>\r\n            <Grid.Column width={4}>\r\n                <Header sub color='teal' content='Step 3 - Preview & Upload'/>\r\n                {files && files.length > 0 && \r\n                <>\r\n                    <div className='img-preview' style={{minHeight: 200, overflow: 'hidden'}}/>\r\n                    <Button.Group widths={2} margin-top={1}>\r\n                        <Button loading={loading} onClick={onCrop} positive icon='check' />\r\n                        <Button disabled={loading} onClick={() => setFiles([])} icon='close' />\r\n                    </Button.Group>\r\n                </>}\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n}","import { observer } from 'mobx-react-lite';\r\nimport React, { SyntheticEvent, useState } from 'react';\r\nimport { Card, Header, Tab, Image, Grid, Button } from 'semantic-ui-react';\r\nimport PhotoUploadWidget from '../../app/common/imageUpload/PhotoUploadWidget';\r\nimport { Photo, Profile } from '../../app/models/profile';\r\nimport { useStore } from '../../app/stores/store';\r\n\r\ninterface Props {\r\n    profile: Profile\r\n}\r\n\r\nexport default observer(function ProfilePhotos({profile} : Props) {\r\n    const {profileStore: {isCurrentUser, uploadPhoto, uploading, loading, setMainPhoto, deletePhoto}} = useStore();\r\n    const [addPhotoMode, setAddPhotoMode] = useState(false);\r\n    const [target, setTarget] = useState('');\r\n\r\n    function handlePhotoUpload(file: Blob) {\r\n        uploadPhoto(file).then(() => setAddPhotoMode(false));\r\n    }\r\n\r\n    function handleSetMainPhoto(photo: Photo, e: SyntheticEvent<HTMLButtonElement>) {\r\n        setTarget(e.currentTarget.name);\r\n        setMainPhoto(photo);\r\n    }\r\n\r\n    function handleDeletePhoto(photo: Photo, e: SyntheticEvent<HTMLButtonElement>) {\r\n        setTarget(e.currentTarget.name);\r\n        deletePhoto(photo);\r\n    }\r\n\r\n\r\n    return (\r\n        <Tab.Pane>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header floated='left' icon='image' content='Photos' />\r\n                    {isCurrentUser && (\r\n                        <Button floated='right' basic\r\n                            content={addPhotoMode ? 'Cancel' : 'Add Photo'}\r\n                            onClick={() => setAddPhotoMode(!addPhotoMode)}\r\n                        />\r\n                    )}\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                        {addPhotoMode ? (\r\n                            <PhotoUploadWidget uploadPhoto={handlePhotoUpload} loading={uploading}/>\r\n                        ) : (\r\n                             <Card.Group itemsPerRow={5}>\r\n                             {profile.photos?.map(photo => (\r\n                                 <Card key={photo.id}>\r\n                                     <Image src={photo.url}/>\r\n                                     {isCurrentUser && (\r\n                                        <Button.Group fluid widths={2}>\r\n                                            <Button\r\n                                                basic\r\n                                                color='green'\r\n                                                content='Main'\r\n                                                name={`main${photo.id}`}\r\n                                                disabled={photo.isMain}\r\n                                                loading={target === `main${photo.id}` && loading}\r\n                                                onClick={e => handleSetMainPhoto(photo,e)}\r\n                                            />\r\n                                            <Button\r\n                                                basic\r\n                                                color='red'\r\n                                                icon='trash'\r\n                                                name={photo.id}\r\n                                                loading={target === photo.id && loading}\r\n                                                onClick={e => handleDeletePhoto(photo,e)}\r\n                                                disabled={photo.isMain}\r\n                                            />\r\n                                        </Button.Group>\r\n                                     )}\r\n                                 </Card>\r\n                             ))}\r\n                         </Card.Group>\r\n                        )}\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Tab } from 'semantic-ui-react';\r\nimport { Profile } from '../../app/models/profile';\r\nimport { useStore } from '../../app/stores/store';\r\nimport ProfileAbout from './ProfileAbout';\r\nimport ProfileActivities from './ProfileActivities';\r\nimport ProfileFollowings from './ProfileFollowings';\r\nimport ProfilePhotos from './ProfilePhotos';\r\n\r\ninterface Props {\r\n    profile: Profile\r\n}\r\n\r\nexport default observer(function ProfileContent({profile} : Props) {\r\n    const {profileStore} = useStore();\r\n\r\n    const panes = [\r\n        {menuItem: 'About', render: () => <ProfileAbout />},\r\n        {menuItem: 'Photos', render: () => <ProfilePhotos profile={profile} />},\r\n        {menuItem: 'Events', render: () => <ProfileActivities />},\r\n        {menuItem: 'Followers', render: () => <ProfileFollowings />},\r\n        {menuItem: 'Following', render: () => <ProfileFollowings />}\r\n    ];\r\n    \r\n    return (\r\n        <Tab\r\n            menu={{fluid: true, vertical: true}}\r\n            menuPosition='right'\r\n            panes={panes}\r\n            onTabChange={(e, data) => profileStore.setActiveTab(data.activeIndex) }\r\n        />\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Divider, Grid, Header, Item, Segment, Statistic } from 'semantic-ui-react';\r\nimport { Profile } from '../../app/models/profile';\r\nimport FollowButton from './FollowButton';\r\n\r\ninterface Props {\r\n    profile: Profile\r\n}\r\n\r\nexport default observer(function ProfileHeader({profile}: Props) {\r\n    return (\r\n        <Segment>\r\n            <Grid>\r\n                <Grid.Column width={12}> \r\n                    <Item.Group>\r\n                        <Item>\r\n                           <Item.Image avatar size='small' src={profile.image || '/assets/user.png'}/>\r\n                           <Item.Content verticalAlign='middle'>\r\n                               <Header as='h1' content={profile.displayName} />\r\n                           </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Grid.Column>\r\n                <Grid.Column width={4}> \r\n                    <Statistic.Group widths={2}>\r\n                        <Statistic label='Followers' value={profile.followersCount}/>\r\n                        <Statistic label='Following' value={profile.followingCount}/>\r\n                    </Statistic.Group>\r\n                    <Divider/>\r\n                    <FollowButton profile={profile}/>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Segment>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React, { useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { Grid } from 'semantic-ui-react';\r\nimport LoadingComponent from '../../app/layout/LoadingComponent';\r\nimport { useStore } from '../../app/stores/store';\r\nimport ProfileContent from './ProfileContent';\r\nimport ProfileHeader from './ProfileHeader';\r\n\r\nexport default observer(function ProfilePage() {\r\n    const {username} = useParams<{username: string}>();\r\n    const {profileStore} = useStore();\r\n    const {loadProfile, loadingProfile, profile, setActiveTab} = profileStore;\r\n\r\n    useEffect(() => {\r\n        loadProfile(username);\r\n        return () => {\r\n            setActiveTab(0);\r\n        }\r\n    }, [loadProfile, username, setActiveTab])\r\n\r\n    if(loadingProfile) return <LoadingComponent content='Loading profile...'/>\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={16}>\r\n                {profile &&\r\n                    <>\r\n                        <ProfileHeader profile={profile}/>\r\n                        <ProfileContent profile={profile} />\r\n                    </>}\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n\r\n})","import React, { useState } from 'react';\r\nimport {Button, Header, Segment} from \"semantic-ui-react\";\r\nimport axios from 'axios';\r\nimport ValidationErrors from './ValidationErrors';\r\n\r\nexport default function TestErrors() {\r\n    const baseUrl = process.env.REACT_APP_API_URL;\r\n    const [errors, setErrors] = useState(null);\r\n\r\n    function handleNotFound() {\r\n        axios.get(baseUrl + 'buggy/not-found').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleBadRequest() {\r\n        axios.get(baseUrl + 'buggy/bad-request').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleServerError() {\r\n        axios.get(baseUrl + 'buggy/server-error').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleUnauthorised() {\r\n        axios.get(baseUrl + 'buggy/unauthorised').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleBadGuid() {\r\n        axios.get(baseUrl + 'activities/notaguid').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleValidationError() {\r\n        axios.post(baseUrl + 'activities', {}).catch(err => setErrors(err));\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Header as='h1' content='Test Error component' />\r\n            <Segment>\r\n                <Button.Group widths='7'>\r\n                    <Button onClick={handleNotFound} content='Not Found' basic primary />\r\n                    <Button onClick={handleBadRequest} content='Bad Request' basic primary />\r\n                    <Button onClick={handleValidationError} content='Validation Error' basic primary />\r\n                    <Button onClick={handleServerError} content='Server Error' basic primary />\r\n                    <Button onClick={handleUnauthorised} content='Unauthorised' basic primary />\r\n                    <Button onClick={handleBadGuid} content='Bad Guid' basic primary />\r\n                </Button.Group>\r\n            </Segment>\r\n            {errors && \r\n                <ValidationErrors errors={errors}/>\r\n            }\r\n        </>\r\n    )\r\n}","import { Redirect, Route, RouteComponentProps, RouteProps } from \"react-router-dom\";\r\nimport { useStore } from \"../stores/store\";\r\n\r\ninterface Props extends RouteProps {\r\n    component: React.ComponentType<RouteComponentProps<any>> | React.ComponentType<any>;\r\n}\r\n\r\nexport default function PrivateRoute({component: Component, ...rest}: Props) {\r\n    const {userStore: {isLoggedIn}} = useStore();\r\n    return (\r\n        <Route\r\n            {...rest}\r\n            render={(props) => isLoggedIn ? <Component {...props} /> : <Redirect to='/'/>}\r\n        />\r\n    )\r\n}","import React, { useEffect } from 'react';\nimport { Container } from 'semantic-ui-react';\nimport NavBar from './NavBar';\nimport ActivityDashboard from '../../features/activities/dashboard/ActivityDashboard';\nimport { observer } from 'mobx-react-lite';\nimport HomePage from '../../features/home/HopePage';\nimport { Route, Switch, useLocation } from 'react-router';\nimport ActivityForm from '../../features/activities/form/ActivityForm';\nimport ActivityDetails from '../../features/activities/details/ActivityDetails';\nimport { ToastContainer } from 'react-toastify';\nimport NotFound from '../../features/errors/NotFound';\nimport ServerError from '../../features/errors/ServerError';\nimport LoginForm from '../../features/users/LoginForm';\nimport { useStore } from '../stores/store';\nimport LoadingComponent from './LoadingComponent';\nimport ModalContainer from '../common/modals/ModalContainer';\nimport ProfilePage from '../../features/profiles/ProfilePage';\nimport TestErrors from '../../features/errors/TestError';\nimport PrivateRoute from './PrivateRoute';\n\nfunction App() {\n  \n  const location = useLocation();\n  const {commonStore, userStore} = useStore();\n\n  useEffect(() => {\n    if (commonStore.token){\n      userStore.getUser().finally(() => commonStore.setUploaded());\n    } else {\n      commonStore.setUploaded();\n    }\n  }, [commonStore, userStore])\n\n  if(!commonStore.appLoaded) return <LoadingComponent content='Loading app...' />\n\n  return (\n    <>\n      <ToastContainer position='bottom-right' hideProgressBar />\n      <ModalContainer/>\n      <Route exact path='/' component={HomePage}/>\n      <Route\n        path={'/(.+)'}\n        render={() => (\n          <>\n            <NavBar />\n            <Container style={{marginTop: '7em'}}>\n              <Switch>\n                <PrivateRoute exact path='/activities' component={ActivityDashboard} />\n                <PrivateRoute path='/activities/:id' component={ActivityDetails} />\n                <PrivateRoute key={location.key} path={['/createActivity', '/manage/:id']} component={ActivityForm} />\n                <PrivateRoute path='/profiles/:username' component={ProfilePage} />\n                <PrivateRoute path='/errors' component={TestErrors} />\n                <Route path='/server-error' component={ServerError} />\n                <Route component={NotFound} />\n              </Switch>\n            </Container>\n          </>\n        )}\n      />\n    </>\n  );\n}\n\nexport default observer(App);\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { useEffect } from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\nexport default function ScrollToTop() {\r\n    const { pathname } = useLocation();\r\n  \r\n    useEffect(() => {\r\n      window.scrollTo(0, 0);\r\n    }, [pathname]);\r\n  \r\n    return null;\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './app/layout/App';\nimport 'react-calendar/dist/Calendar.css';\nimport 'react-toastify/dist/ReactToastify.min.css';\nimport 'semantic-ui-css/semantic.min.css';\nimport './app/layout/styles.css';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport reportWebVitals from './reportWebVitals';\nimport { store, StoreContext } from './app/stores/store';\nimport { Router } from 'react-router-dom';\nimport { createBrowserHistory } from 'history';\nimport ScrollToTop from './app/layout/ScrollToTop';\n\nexport const history = createBrowserHistory();\n\nReactDOM.render(\n  <StoreContext.Provider value = {store}>\n    <Router history={history}>\n      <ScrollToTop />\n      <App />\n    </Router>\n  </StoreContext.Provider>\n   ,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}